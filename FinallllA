
//Function A


//dynamic allocation check
void checkAllocation(void* arr)
{
	if (!arr)
	{
		exit(1);
	}
}

//init each cell with NULL

void nullInsertArray(EdgeList* net, int n)
{
	for (int i = 0; i < n; i++)
	{
		net[i].head = NULL;
		net[i].tail = NULL;
	}
}

//input validation
bool validInput(int* a, int* b, int* price, int n, int maxAttempts)
{
	int attempts = 0;
	while (attempts < maxAttempts)
	{
		if (scanf("%d %d %d", a, b, price) != 3)  //if not three inputs
		{
			printf("Invalid input.\n");
			attempts++;
			while (getchar() != '\n'); //clear
			continue;
		}
		if (*a < 0 || *a >= n || *b < 0 || *b >= n || *price < 0) {
			printf("Invalid input.\n");
			attempts++;
			continue;
		}
		return true; //valid input
	}
	return false; // failed after max attempts
}

//build the network 

void BuildNetwork(EdgeList* net, int n, int m)

{
	int a, b, price;
	for (int i = 0; i < m; i++) //triplets input
	{
		//input check
		if (!validInput(&a, &b, &price, n, 3)) //maximum attempts - define by user?
		{
			printf("Invalid input."); //if input is not valid
			exit(1);
		}
		else // valid input
		{
			updateList(&net[a], b, price);
			updateList(&net[b], a, price);
		}

	}
}

//build - call from Main
EdgeList* build_net(int n)
{
	if (n < 0)
	{
		exit(1);
	}
	int m;
	scanf("%d", &m); //input number of edges
	if (m < 0)
	{
		exit(1);
	}
	EdgeList* net = (EdgeList*)malloc(n * sizeof(EdgeList));  //allocation
	checkAllocation(net);
	nullInsertArray(net, n);
	BuildNetwork(net, n, m);
	return net;
}

//helper for updatelist - create node
EdgeNode* BuildNode(int neighbor, int cost)
{

	EdgeNode* newNode = (EdgeNode*)malloc(sizeof(EdgeNode));
	checkAllocation(newNode);

	newNode->e.neighbor = neighbor;
	newNode->e.cost = cost;
	newNode->next = NULL;

	return newNode;
}

//insert node at beginning of the list
void addFirst(EdgeList* list, EdgeNode* node)
{
	node->next = list->head;
	list->head = node;

	if (list->tail == NULL) // if list was empty, update tail
		list->tail = node;
}

// insert node at end of the list
void addLast(EdgeList* list, EdgeNode* node)
{
	node->next = NULL;

	if (list->head == NULL) //list is empty
	{
		list->head = node;
		list->tail = node;
	}
	else
	{
		list->tail->next = node;
		list->tail = node;
	}
}

// insert node after the given previous node
void addMiddle(EdgeNode* prev, EdgeNode* node)
{
	node->next = prev->next;
	prev->next = node;

}

//update list: insert new edge, avoid duplicates
void updateList(EdgeList* list, int b, int price)
{

	//check if the neighbor already exists in the list
	EdgeNode* curr = list->head;
	while (curr != NULL)
	{
		if (curr->e.neighbor == b) //edge already exists
		{
			if (curr->e.cost != price) //if other price, update it
			{
				curr->e.cost = price;
			}
			return; //exit – don't insert duplicate
		}
		curr = curr->next;
	}

	//if not found – insert it in sorted position


	if (list->head == NULL) //empty list
	{
		EdgeNode* connectedComp = BuildNode(b, price);
		list->head = connectedComp;
		list->tail = connectedComp;
	}
	else //list not empty – find correct position
	{

		if (b < list->head->e.neighbor) // Insert at start
		{
			EdgeNode* connectedComp = BuildNode(b, price);
			addFirst(list, connectedComp);
		}
		else if (b > list->tail->e.neighbor) // Insert at end
		{

			EdgeNode* connectedComp = BuildNode(b, price);
			addLast(list, connectedComp);
		}
		else // Insert in middle
		{
			EdgeNode* current = list->head;
			while (current->next != NULL)
			{
				if (b > (current->e.neighbor) && b < (current->next->e.neighbor))
				{
					EdgeNode* connectedComp = BuildNode(b, price);
					addMiddle(current, connectedComp);
					break;
				}
				current = current->next;
			}
		}
	}

}


